# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: srhalor/order-service
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.0.2

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: order-service-sa

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations:
  co.elastic.apm/enable: "true"
  co.elastic.apm/service-name: "order-service"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels:
  app: order-service
  environment: production
  team: payments
  tier: backend

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
  runAsNonRoot: true

securityContext:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/auth-url: "https://security-service.myspace.svc.cluster.local:8080/api/authenticate"
    nginx.ingress.kubernetes.io/auth-response-headers: "*"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-connections: "1000"
    nginx.ingress.kubernetes.io/limit-rps: "500"
    nginx.ingress.kubernetes.io/proxy-body-size: "20m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    nginx.ingress.kubernetes.io/enable-cors: "true"
  hosts:
    - host: api.fmd.com
      paths:
        - path: /order-service(/|$)(.*)
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - api.fmd.com
      secretName: api-tls-secret

resources:
  requests:
    cpu: "250m"
    memory: "512Mi"
    ephemeral-storage: "512Mi"
  limits:
    cpu: "500m"
    memory: "1Gi"
    ephemeral-storage: "1Gi"

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8081
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8081
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 75
  targetMemoryUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables for the application.
environmentVariable:
  # Enable graceful shutdown in Spring Boot 2.3+
  SERVER_SHUTDOWN: "graceful"
  # Enable virtual threads in Spring Boot 3.2+
  SPRING_THREADS_VIRTUAL_ENABLED: "true"
  # APM for Elastic observability
  ELASTIC_APM_SERVER_URL: "http://apm-server:8200"
  ELASTIC_APM_SERVICE_NAME: "order-service"
  ELASTIC_APM_ENVIRONMENT: "development"
  ELASTIC_APM_APPLICATION_PACKAGES: "com.fmd.order"
  # Database connection configuration
  SPRING_DATASOURCE_URL: ""
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: ""
  SPRING_DATASOURCE_USERNAME: ""
  # Spring Boot Actuator configuration
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "*"
  MANAGEMENT_SERVER_PORT: 8081
  # Logging configuration
  LOGGING_LEVEL_ROOT: "INFO"
  LOGGING_LEVEL_COM_FMD: "DEBUG"
  LOGGING_STRUCTURED_FORMAT_CONSOLE: "ecs"
  LOGGING_INCLUDE_LOCATION: "true"
  LOGGING_STRUCTURED_ECS_SERVICE_NAME: "order-service"
  LOGGING_STRUCTURED_ECS_SERVICE_VERSION: "1"
  LOGGING_STRUCTURED_ECS_SERVICE_ENVIRONMENT: "development"
  LOGGING_STRUCTURED_ECS_SERVICE_NODE-NAME: "primary"

secretEnvironmentVariable:
  ELASTIC_APM_SECRET_TOKEN:
    name: order-service-secrets
    key: apm-secret-token
  SPRING_DATASOURCE_PASSWORD:
    name: order-service-secrets
    key: datasource-password
  # Add more secret env vars as needed
